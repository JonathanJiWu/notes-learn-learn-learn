
@ HELLO WORLD FROM C++

    #include <iostream> ==>include libraries
    int main() {        ==>Main function
    std::cout << "Hello World!\n";  ==>function body
    }


@ OUTPUT

*execution
    top to down, line by line

*std::cout <<"Hello World!\n";
    std::cout ==>Standard(namespace), character output stream, pronounced "see-out"
    :: ==>scope
    << ==>operator
    "Hello World?\n" ==>is what being output, double quotes around text. \n indicates a new line.
    ; ==>end the statement

*namespace
    a set of signs(names)that are used to identify and refer to objects of various kinds.


@ PATTERN
    
*/n
    can print out several lines with one fucntion

@ COMPILE AND EXECUTE

*C++ is a compiled language, source code => compile => machine code => execute.

*compile
    turn/translate source code into machaine code

*g++
    type |g++ app-name.cpp| into terminal to call on the compiler

*execute
    type |./machine-code-file-name.out| in terminal

*process
    executable file => loaded to CPU => line by line


@ NAMING EXECUTABLES
    
*name executable & output & execute
    |g++ hello.cpp -o name-of-the-executable| 
    then
    |./name-of-the-executable| to execute

*COMMENTS
    |// comments here!|
    |/*comment,
    comment,
    comment.*/|

*source code suffix
    .cpp
    .h

    VARIABLE
    =========

*declare
    name+type
    | int score; |

*strongly typed
    
*initialize
    | score = 0; |

*arthmetic Operators
    +, -, *, /, %

*print out the value of variable
    std::cout << score << "\n";

*chaining
    int age = 28;
    std::cout << "Hello, I am ";
    std::cout << age;
    std::cout << " years old\n";
    output ==> Hello, I am 28 years old
    can be written as ==> std::cout << "Hello, I am " << age << " years old\n";

    #include <iostream>
    int main() { 
    int score = 0;
    std::cout << "Player score: " << score <<"\n";   
    }

*user input
    std::cout << "Enter your password: ";
    std::cin >> password;

    cin ==>see-in
    >> ==>get from

*recompile after any changes


    CONDITIONALS
    =================

*if
    #include <iostream>
    int main() {
    int grade = 90;
    if(grade > 60){
        std::cout << "Pass\n";
    }}

*relational Operators
    ==, !=, >, <, >=, <=

*else, else if

*switch statement
    switch (grade) {
    case 9:
        std::cout << "Freshman\n";
        break;
    case 10:
        std::cout << "Sophomore\n";
        break;
    case 11:
        std::cout << "Junior\n";
        break;
    case 12:
        std::cout << "Senior\n";
        break;
    default:
        std::cout << "Invalid\n";
        break;
    }    

*Operators
    &&, ||, !

    LOOPS
    ======

*While loop
*for loop

    ERRORS
    =======
*compile-time errors
    1. syntax errors
    2. type errors

*link-time errors
    the program needs some function or library that it can't find
    found by linker
    1. using a function that was never defined
    2. Main(), instead of maine()

*linker
    combine object files into an executable files

*run-time errors
    1. division by zero/division error
    2. trying to open a file that doesn't exist

*logic errors
    1. program logic is flawed
    2. if/loop mistakes


    VECTORS
    =======

*vector
    a sequence of elements that can be accessed by index(so, sorted array?)

::
    scope resolution operator
    allows statically traverse scopes such as namespace and classes in order to reference the identifer
    resolve ambiguities pertaining to scope
    ~ it allows access to global version of variable

*creating a vector
    | std::vector | lives in the <vector> header
    1. add | #include <vector> | at the top of the program
    2. std::vector <type> name;
    so define a vector of int called calories:
        | std::vector<int> calories; |

    the type of the vector can not be changed after the declaration

*initializing a vector and giving it value
    | std::vector<double> location = {45.49646, -45.84155} |

*initializing a vector and presizing(setting the size)
    | std::vector<double> location(2); |

*index of vectors
    output a certain element
    | std::cout << vowels[3];

*add/remove element to vector
    .push_back()
        add a element to the end of the vector
    .pop_back()
        remove element from the back

*.size()
    length of the vector, how many elements
    std::cout<<grocery.size();

*operations
    loop through a vector

*#include
    preprocessor directive that tells the compiler to include certain libraries

*include files
    include functionalities from other scource files
    (like imports/exports in React?)

    1. when include your own library you write it like this
    | #include "includes/calculation.cpp" |
    (bad practice)

    2. when using C++ library you write it like this:
    | #include <iostream> |

#header files
    .h file with the exact same name with the .cpp file
    has only the signiture of the .cpp whitout showing it
    example of a header file:
        | #include <iostream> |
        | int add(int, int);  |
        | void output_message(std::string); |

        and just say | #include "includes/calculation.h" | in the file you are importing into
        the .CPP and .h will be linked together because they have the same name during the the compliation
        just say | g++ -o main.exe main.cpp includes/calculations.cpp | to generate .exe file


    FUNCTIONS 
    ============

*build-in fucntions
    gain access by including headers like <cmath>, <string>

*calling a function
    | std::cout<< sqrt(9) << "\n"; | //output 3

*declare & Define
    | return_type function_name( any, parameters, you, have ) { |  declaration
    | // Code block here |                                          Defination
    | return output_if_there_is_any; |
}

*void
    aka subroutine, has no return value

*return types
    double, int, bool, char, std::string, std::vector
    return statement is the last line of code will execute
    | std:: string alway_blue(){ |
    |    return "blue!"; |
    | } |

*return value
    if the function is not void and has a return type:
    1. there must be a value returned from the function
    2. the returned value type must be the same as the function's type

    the value is returned to the place where the function is called

*parameters & arguments
    parameters are variables used in functions, are placeholders for input value used during function call (formal parameter)
    the value passed into the function during the function call is called argument (actual parameter)
    | void get_emergency_number(std::string emergency_number){ |
    | std::cout << "Dial " << emergency_number;} |

*multiple arguments
    1. function call must include the same number of arguments as the parameters
    2. arguments must be passed in the same order

    CODE CHALLENGES
    =====================

*raise to the power
    include <cmath>
    pow(base, exponent);

*function that returns vector
    std::vector<int> function-name(){
        
    }

    FUNCTIONS SCOPE & FLEXIBILITY
    ===============================

*scope
    the region of code that can access or view a given element

*globlal scope
    accessible throughout the program

*local scope
    only accessible inside the function

*multi-file programs
    when code grown larger, we need to declare the function at the top and define it at the bottom
    like:
        #include <iostream>
        
        // Declaration at the top:
        void eat();
        
        int main() {
        eat();
        }
        
        // Definition at the bottom:
        void eat() {
        
        std::cout << "nom nom nom\n";
        }

    move function definition to another file and leave a list of declaration above main()
    compiles files together into a single exe like this:
       | g++ main.cpp my_functions.cpp |

*getting header
    there will be too many function declarations before main() if the code keep growing
    and declare functions repeatedly in multiple files is hard to make change and maintain
    
    --move all the the function declarations to a header file, with the same name, file extension is .hpp or .h
    just add | #include "my_functions.hpp" | to the top of main.cpp

*inline functions
    usually in a header file, qualified by | inline |:

    inline 
    void eat() {
    std::cout << "nom nom\n";
    }

    | inline | advises compiler to insert the function body where the function call is

*member functions
    function inside of classes, sometimes also called "inline functions"

*default argument
    a argument is required if the function has a parameter
    asign a value to the parameter in the function declaration, it will be the default argument if no argument is given when making the function call

            // Declaration
            void intro(std::string name, std::string lang = "C++");
            
            // Definition
            void intro(std::string name, std::string lang) {
            std::cout << "Hi, my name is "
                        << name
                        << " and I'm learning "
                        << lang
                        << ".\n";
            }

        "C++" is the default argument

*default argument for functions with two parameters
    which argument corresponds with parameter based on order
    parameters with out ddefault arguments comes first
    two arguments both needs to be call with function with two default arguments
    if
        first argument is the default value & the second argument is not default value

*functin overload
    change the way a function behaves depending on argument passed

    accept different tpyes of arguments
    optional parameters

    multiple functions with the same name, has either different tpye of parameters
    or different number of parameters






